@page "/outgoing_invoices/create"

@inject ApiService ApiService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ToastService ToastService

@attribute [Authorize]

<PageTitle>Neue Ausgangsrechnung | ACC Web UI</PageTitle>

<Card Class="shadow-sm mb-3">
    <CardBody>
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <h1>Neue Ausgangsrechnung</h1>
            <div class="btn-group" role="group" aria-label="Actions">
                <Button Type="ButtonType.Link" To="/outgoing_invoices" Color="ButtonColor.Primary"><Icon Name="IconName.BackspaceFill" /> Zurück</Button>
                <Button @onclick="Save" Color="ButtonColor.Primary"><Icon Name="IconName.Floppy" /> Speichern</Button>
            </div>
        </div>

        @if (IsLoading)
        {
            <div class="spinner-border ms-auto" aria-hidden="true"></div>
        }
        else
        {
            <div class="row mb-3">
                <div class="col">
                    <label class="form-label">Auftrag:</label>
                    <InputSelect class="form-select"
                                 ValueExpression="@(() => SelectedOrder.AuftragID)"
                                 Value="@SelectedOrder.AuftragID"
                                 ValueChanged="@((int value) => OrderChanged(value))">
                        <option value="0">Kein Auftrag</option>
                        @foreach (Auftrag order in Orders)
                        {
                            <option value="@order.AuftragID">@order.Auftragsname</option>
                        }
                    </InputSelect>
                </div>
                <div class="col">
                    <label class="form-label">Rabatt:</label>
                    <div class="input-group">
                        <input type="number" class="form-control" @bind-value="OutgoingInvoice.RabattPct" step="0.01" />
                        <input class="form-control form-control-sm" value="@(OutgoingInvoice.RabattPct*100) %" style="text-align: right" disabled="disabled" />
                    </div>
                </div>
                @if (SelectedOrder.AuftragID == 0)
                {
                    <div class="col">
                        <label class="form-label">Währung:</label>
                        <InputSelect class="form-select"
                                     ValueExpression="@(() => OutgoingInvoice.ZugehoerigeWaehrungID)"
                                     Value="@OutgoingInvoice.ZugehoerigeWaehrungID"
                                     ValueChanged="@((int value) => CurrencyChanged(value))">
                            @foreach (Waehrung currency in Currencies)
                            {
                                <option value="@currency.WaehrungID">@currency.WaehrungName (@currency.WaehrungZeichen)</option>
                            }
                        </InputSelect>
                    </div>
                }
            </div>

            <div class="row mb-3">
                <div class="form-label d-inline-block">
                    <b>
                        Rechnungsempfänger:
                    </b>
                    @if (SelectedOrder.AuftragID != 0)
                    {
                        <div class="form-check form-switch d-inline-block">
                            <InputCheckbox class="form-check-input" ValueExpression="@(() => AdressDifferent)"
                                           Value="@AdressDifferent"
                                           ValueChanged="@((bool value) => ToggleAdress(AdressDifferent))" type="checkbox" role="switch" id="AdressDifferent" />
                            <label class="form-check-label" for="AdressDifferent"> abweichend?</label>
                        </div>
                    }

                </div>
                <div class="col">
                    @if (AdressDifferent)
                    {
                        <div class="row">
                            <div class="col">
                                <div class="form-group">
                                    <label for="street">Name:</label>
                                    <input type="text" class="form-control" @bind-value="OutgoingInvoice.Rechnungsempfaenger.Anschrift" />
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-8">
                                <div class="form-group">
                                    <label for="street">Straße:</label>
                                    <input type="text" class="form-control" @bind-value="OutgoingInvoice.Rechnungsempfaenger.ZugehoerigeAdresse.Strasse" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="houseNumber">Hausnummer:</label>
                                    <input type="text" class="form-control" @bind-value="OutgoingInvoice.Rechnungsempfaenger.ZugehoerigeAdresse.Hausnummer" />
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="zip">PLZ:</label>
                                    <input type="text" class="form-control" @bind-value="OutgoingInvoice.Rechnungsempfaenger.ZugehoerigeAdresse.ZugehoerigePostleitzahl.PLZ" />
                                </div>
                            </div>
                            <div class="col-md-8">
                                <div class="form-group">
                                    <label for="city">Ort:</label>
                                    <input type="text" class="form-control" @bind-value="OutgoingInvoice.Rechnungsempfaenger.ZugehoerigeAdresse.ZugehoerigePostleitzahl.Ortsname" />
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="state">Bundesland:</label>
                                    <input type="text" class="form-control" @bind-value="OutgoingInvoice.Rechnungsempfaenger.ZugehoerigeAdresse.ZugehoerigePostleitzahl.Bundesland" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="country">Land:</label>
                                    <input type="text" class="form-control" @bind-value="OutgoingInvoice.Rechnungsempfaenger.ZugehoerigeAdresse.ZugehoerigePostleitzahl.Land" />
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <p>
                            <span>@OutgoingInvoice.Rechnungsempfaenger?.Anschrift</span>
                        </p>
                        <p>
                            @if (OutgoingInvoice.Rechnungsempfaenger?.ZugehoerigeAdresse != null)
                            {
                                <span>@OutgoingInvoice.Rechnungsempfaenger.ZugehoerigeAdresse?.Strasse @OutgoingInvoice.Rechnungsempfaenger.ZugehoerigeAdresse?.Hausnummer</span>
                                <br />
                                <span>@OutgoingInvoice.Rechnungsempfaenger.ZugehoerigeAdresse?.ZugehoerigePostleitzahl?.PLZ @OutgoingInvoice.Rechnungsempfaenger.ZugehoerigeAdresse?.ZugehoerigePostleitzahl?.Ortsname</span>
                                <br />
                                <span>@OutgoingInvoice.Rechnungsempfaenger.ZugehoerigeAdresse?.ZugehoerigePostleitzahl?.Bundesland @OutgoingInvoice.Rechnungsempfaenger.ZugehoerigeAdresse?.ZugehoerigePostleitzahl?.Land</span>
                            }
                        </p>
                    }
                </div>
                <div class="col">
                </div>
            </div>

            <div class="row mb-3">
                <div class="col">
                    <label><b>Rechnungstext:</b></label>
                    <InputTextArea class="form-control" @bind-Value="OutgoingInvoice.Rechnungstext" />
                </div>
            </div>

            <table class="table">
                <thead>
                    <tr>
                        <th>
                            <div class="row">
                                <div class="col d-flex justify-content-start">
                                    Positionsbeschreibung
                                </div>
                                <div class="col d-flex justify-content-end">
                                    <Button class="btn btn-primary btn-sm" @onclick="AddPosition"><Icon Name="IconName.BagPlus" /> Position hinzufügen</Button>
                                </div>
                            </div>
                        </th>
                        <th>Steuersatz</th>
                        <th>Stueckpreis (Netto)</th>
                        <th>Stückzahl & Einheit</th>
                        <th>Positionspreis (Netto)</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        Zwischensumme = 0;
                        Rabattsumme = 0;
                        Nettosumme = 0;
                        Mwstsumme = 0;
                        Bruttosumme = 0;

                        int Positionsnummer = 1;
                    }
                    @foreach (var position in OutgoingInvoice.Rechnungspositionen)
                    {
                        position.PositionsNummer = Positionsnummer;
                        Positionsnummer++;

                        <tr>
                            <td width="35%">
                                <InputText class="form-control form-control-sm" @bind-Value="position.Positionsbeschreibung" />
                                <div class="row mt-1">
                                    <div class="col">
                                        Leistungszeitraum:
                                    </div>
                                    <div class="col">
                                        <div class="input-group">
                                            <DateInput class="form-control form-control-sm" @bind-Value="position.LeistungszeitraumVon" />
                                            <DateInput class="form-control form-control-sm" @bind-Value="position.LeistungszeitraumBis" />
                                        </div>
                                    </div>
                                </div>
                                <div class="row mt-1">
                                    <div class="col">
                                        <label class="form-label">Leistungsnachweisposition:</label>
                                        @if (SelectedOrder?.AuftragID != 0)
                                        {
                                            @if (position.ZugehoerigeAuftragspositionID != null)
                                            {
                                                <InputSelect class="form-select form-select-sm" @bind-Value="position.ZugehoerigeLeistungsnachweispositionID">
                                                    <option value="">Keine Zuordnung</option>
                                                    @foreach (Leistungsnachweisposition performance_record_position in PerformanceRecordPositions)
                                                    {
                                                        <option value="@performance_record_position.LeistungsnachweispositionID">@performance_record_position.Kommentar</option>
                                                    }
                                                </InputSelect>
                                            }
                                            else
                                            {
                                                <div>
                                                    <Badge Color="BadgeColor.Info"><Icon Name="IconName.ExclamationTriangleFill" /> Bitte wähle zuerst eine Auftragsposition aus</Badge>
                                                </div>
                                            }
                                        }
                                        else
                                        {
                                            <div>
                                                <Badge Color="BadgeColor.Info"><Icon Name="IconName.ExclamationTriangleFill" /> Bitte wähle zuerst einen Auftrag aus</Badge>
                                            </div>
                                        }
                                    </div>
                                    <div class="col">
                                        <label class="form-label">Auftragsposition:</label>
                                        @if (SelectedOrder?.AuftragID != 0)
                                        {
                                            <InputSelect class="form-select form-select-sm" @bind-Value="position.ZugehoerigeAuftragspositionID">
                                                <option value="">Keine Zuordnung</option>
                                                @foreach (Auftragsposition order_position in SelectedOrder.Auftragspositionen)
                                                {
                                                    <option value="@order_position.AuftragspositionID">@order_position.Positionsbezeichnung</option>
                                                }
                                            </InputSelect>
                                        }
                                        else
                                        {
                                            <div>
                                                <Badge Color="BadgeColor.Info"><Icon Name="IconName.ExclamationTriangleFill" /> Bitte wähle zuerst einen Auftrag aus</Badge>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </td>
                            <td width="7%" style="vertical-align: bottom;">
                                <div class="input-group">
                                    <input class="form-control form-control-sm" type="number" style="width: 20%; text-align: right" placeholder="Steuersatz" step="0.01" @bind-value="position.Steuersatz" />
                                    <input class="form-control form-control-sm" value="@(position.Steuersatz*100) %" style="text-align: right" disabled="disabled" />
                                </div>
                            </td>
                            <td width="10%" style="vertical-align: bottom;">
                                <div class="input-group">
                                    <input class="form-control form-control-sm" type="number" style="width: 70%; text-align: right" placeholder="Stückpreis (Netto)" @bind-value="position.StueckpreisNetto" />
                                    <input class="form-control form-control-sm" value="@OutgoingInvoice.ZugehoerigeWaehrung?.WaehrungZeichen" disabled="disabled" />
                                </div>
                            </td>
                            <td width="11%" style="vertical-align: bottom;">
                                <div class="input-group">
                                    <input class="form-control form-control-sm" type="number" style="width: 55%; text-align: right" placeholder="Stückzahl" @bind-value="position.Stueckzahl" />
                                    <InputSelect class="form-select form-select-sm" @bind-Value="position.ZugehoerigeAbrechnungseinheitID">
                                        <option value=""></option>
                                        @foreach (Abrechnungseinheit abrechnungseinheit in AccountingUnits)
                                        {
                                            <option value="@abrechnungseinheit.AbrechnungseinheitID">@abrechnungseinheit.Abkuerzung</option>
                                        }
                                    </InputSelect>
                                </div>
                            </td>
                            <td width="10%" style="vertical-align: bottom;">
                                <div class="input-group">
                                    <input class="form-control form-control-sm" style="text-align: right; width: 70%" value="@position.Nettobetrag.ToString("N2")" disabled="true" />
                                    <input class="form-control form-control-sm" value="@OutgoingInvoice.ZugehoerigeWaehrung?.WaehrungZeichen" disabled="true" />
                                </div>
                            </td>
                            <td width="5%" style="vertical-align: bottom;">
                                <Button class="btn btn-danger btn-sm" @onclick="() => RemovePosition(position)">
                                    <Icon Name="IconName.Trash" />
                                </Button>
                            </td>
                        </tr>
                        Zwischensumme += position.Nettobetrag;
                        Rabattsumme += position.Nettobetrag * OutgoingInvoice.RabattPct.GetValueOrDefault();
                        Mwstsumme += (position.Nettobetrag - (position.Nettobetrag * OutgoingInvoice.RabattPct.GetValueOrDefault())) * position.Steuersatz;
                    }
                    @if (@OutgoingInvoice.RabattPct != null)
                    {
                        <tr>
                            <td style="text-align: right;" colspan="4"><b>Zwischensumme (Netto):</b></td>
                            <td style="text-align: right;"><b>@Zwischensumme.ToString("N2") @OutgoingInvoice.ZugehoerigeWaehrung?.WaehrungZeichen</b></td>
                            <td></td>
                        </tr>
                        <tr>
                            <td style="text-align: right;" colspan="4">Rabatt (@(Math.Round((decimal)OutgoingInvoice.RabattPct * 100, 2)) %):</td>
                            <td style="text-align: right;">@Rabattsumme.ToString("N2") @OutgoingInvoice.ZugehoerigeWaehrung?.WaehrungZeichen</td>
                            <td></td>
                        </tr>
                    }
                    <tr>
                        @{
                            Nettosumme = Zwischensumme - Rabattsumme;
                        }
                        <td style="text-align: right;" colspan="4"><b>Gesamtpreis (Netto):</b></td>
                        <td style="text-align: right;"><b>@Nettosumme.ToString("N2") @OutgoingInvoice.ZugehoerigeWaehrung?.WaehrungZeichen</b></td>
                        <td></td>
                    </tr>
                    <tr>
                        <td style="text-align: right;" colspan="4">Mehrwertsteuerbetrag:</td>
                        <td style="text-align: right;">@Mwstsumme.ToString("N2") @OutgoingInvoice.ZugehoerigeWaehrung?.WaehrungZeichen</td>
                        <td></td>
                    </tr>
                    <tr>
                        @{
                            Bruttosumme = Nettosumme + Mwstsumme;
                        }
                        <td style="text-align: right;" colspan="4"><b>Gesamtpreis (Brutto):</b></td>
                        <td style="text-align: right;"><b>@Bruttosumme.ToString("N2") @OutgoingInvoice.ZugehoerigeWaehrung?.WaehrungZeichen</b></td>
                        <td></td>
                    </tr>
                </tbody>
            </table>
        }
    </CardBody>
</Card>

@code {


    private Ausgangsrechnung OutgoingInvoice;

    private Auftrag SelectedOrder;
    private Waehrung SelectedWaehrung;

    private ClaimsPrincipal AuthenticatedUser;

    private List<Leistungsnachweisposition> PerformanceRecordPositions;
    private IEnumerable<Kostenstelle> CostCentres;
    private IEnumerable<Auftrag> Orders;
    private IEnumerable<Abrechnungseinheit> AccountingUnits;
    private IEnumerable<Waehrung> Currencies;

    private bool IsLoading = true;
    private bool AdressDifferent = false;

    private decimal Zwischensumme = 0;
    private decimal Rabattsumme = 0;
    private decimal Nettosumme = 0;
    private decimal Mwstsumme = 0;
    private decimal Bruttosumme = 0;

    // Initialize method
    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        AuthenticatedUser = authState.User;

        SelectedOrder = new Auftrag();
        PerformanceRecordPositions = new List<Leistungsnachweisposition>();

        ApiService.InitializeEndpoint(ResourceEndpoint.cost_centres);
        ApiResponseDTO<Kostenstelle> cost_centres = await ApiService.GetAsync<ApiResponseDTO<Kostenstelle>>();
        CostCentres = cost_centres.Items;

        ApiService.InitializeEndpoint(ResourceEndpoint.accounting_units);
        ApiResponseDTO<Abrechnungseinheit> accounting_units = await ApiService.GetAsync<ApiResponseDTO<Abrechnungseinheit>>();
        AccountingUnits = accounting_units.Items;

        ApiService.InitializeEndpoint(ResourceEndpoint.currencies);
        ApiResponseDTO<Waehrung> currencies = await ApiService.GetAsync<ApiResponseDTO<Waehrung>>();
        Currencies = currencies.Items;

        ApiService.InitializeEndpoint(ResourceEndpoint.orders);
        ApiResponseDTO<Auftrag> orders = await ApiService.GetAsync<ApiResponseDTO<Auftrag>>();
        Orders = orders.Items;

        OutgoingInvoice = new Ausgangsrechnung()
        {
            ZugehoerigeWaehrungID = Currencies.FirstOrDefault().WaehrungID,
            ZugehoerigeWaehrung = Currencies.FirstOrDefault(),
            RechnungsDatum = DateTime.Now,
            ZugehoerigeAusgangsrechnungshistorie = new List<Ausgangsrechnungshistorie>(),
            Rechnungspositionen = new List<Ausgangsrechnungsposition>(),
            Rechnungsempfaenger = new()
            {
                ZugehoerigeAdresse = new()
                {
                    ZugehoerigePostleitzahl = new()
                }
            }
        };

        if (SelectedOrder.AuftragID == 0)
        {
            AdressDifferent = true;
        }

        IsLoading = false;
    }

    // Auftragsinformationen an Rechnung übergeben
    private async Task OrderChanged(int AuftragID)
    {
        PerformanceRecordPositions.Clear();

        ApiService.InitializeEndpoint(ResourceEndpoint.orders);
        SelectedOrder = await ApiService.GetByIdAsync<Auftrag>(AuftragID);

        if (SelectedOrder != null)
        {
            SelectedOrder.Leistungsnachweise?.ForEach(lnw =>
            {
                PerformanceRecordPositions.AddRange(lnw.Leistungsnachweispositionen);
            });

            OutgoingInvoice.ZugehoerigeWaehrung = SelectedOrder.ZugehoerigeWaehrung;
            OutgoingInvoice.ZugehoerigesGeschaeftsjahr = SelectedOrder.ZugehoerigesGeschaeftsjahr;
            OutgoingInvoice.Rechnungsempfaenger = SelectedOrder.ZugehoerigesProjekt.Rechnungsempfaenger;
            OutgoingInvoice.RechnungsempfaengerID = SelectedOrder.ZugehoerigesProjekt.Rechnungsempfaenger.DebitorID;

            AdressDifferent = false;
        }
        else
        {
            foreach (Ausgangsrechnungsposition position in OutgoingInvoice.Rechnungspositionen)
            {
                position.ZugehoerigeAuftragspositionID = null;
                position.ZugehoerigeLeistungsnachweispositionID = null;
            }

            OutgoingInvoice.RechnungsempfaengerID = null;

            OutgoingInvoice.Rechnungsempfaenger = new()
            {
                    ZugehoerigeAdresse = new()
                    {
                        ZugehoerigePostleitzahl = new()
                    }
            };

            SelectedOrder = new() { AuftragID = 0 };

            OutgoingInvoice.ZugehoerigeWaehrungID = Currencies.FirstOrDefault().WaehrungID;
            OutgoingInvoice.ZugehoerigeWaehrung = Currencies.FirstOrDefault();

            AdressDifferent = true;
        }
    }

    private async Task CurrencyChanged(int WaehrungID)
    {
        if (WaehrungID != 0)
        {
            ApiService.InitializeEndpoint(ResourceEndpoint.currencies);
            OutgoingInvoice.ZugehoerigeWaehrungID = WaehrungID;
            OutgoingInvoice.ZugehoerigeWaehrung = await ApiService.GetByIdAsync<Waehrung>(WaehrungID);
        }
    }


    private async Task ToggleAdress(bool value)
    {
        AdressDifferent = !value;

        if (AdressDifferent)
        {
            OutgoingInvoice.Rechnungsempfaenger = new()
                {
                    ZugehoerigeAdresse = new()
                    {
                        ZugehoerigePostleitzahl = new()
                    }
                };

            if(SelectedOrder?.AuftragID != 0)
            {
                OutgoingInvoice.Rechnungsempfaenger.ZugehoerigerKundeID = SelectedOrder?.ZugehoerigesProjekt.Rechnungsempfaenger.ZugehoerigerKundeID;
            }
        }
        else if (SelectedOrder?.ZugehoerigesProjekt?.Rechnungsempfaenger != null)
        {
            OutgoingInvoice.Rechnungsempfaenger = SelectedOrder.ZugehoerigesProjekt.Rechnungsempfaenger;
        }
    }

    private async Task Save()
    {
        // Felder auf Null setzen für den Context. 
        // TODO: Später vielleicht schönere Lösung finden
        if (!AdressDifferent)
        {
            OutgoingInvoice.Rechnungsempfaenger = null;
        }

        foreach (Ausgangsrechnungsposition position in OutgoingInvoice.Rechnungspositionen)
        {
            position.ZugehoerigeAuftragsposition = null;
            position.ZugehoerigeRechnung = null;
            position.ZugehoerigeLeistungsnachweisposition = null;
            position.ZugehoerigeAbrechnungseinheit = null;
            position.ZugehoerigeKostenstelle = null;
        }

        OutgoingInvoice.ZugehoerigeWaehrung = null;
        OutgoingInvoice.ZugehoerigesGeschaeftsjahr = null;

        Ausgangsrechnungshistorie historie = new Ausgangsrechnungshistorie()
            {
                Bemerkung = "Ausgangsrechnung angelegt",
                AktionsTyp = UserActionEnum.Create,
                Zeitstempel = DateTime.Now,
                Benutzer = AuthenticatedUser.Identity?.Name
            };

        OutgoingInvoice.ZugehoerigeAusgangsrechnungshistorie.Add(historie);

        ApiService.InitializeEndpoint(ResourceEndpoint.outgoing_invoices);

        Ausgangsrechnung result = await ApiService.CreateAsync<Ausgangsrechnung>(OutgoingInvoice);

        ToastService.Notify(
            new ToastMessage()
            {
                Type = ToastType.Success,
                IconName = IconName.FileEarmarkCheck,
                Title = "Ausgangsrechnung",
                HelpText = DateTime.Now.ToString(),
                Message = "Ausgangsrechnung erfolgreich erstellt",
            }
        );

        Navigation.NavigateTo("outgoing_invoices");
    }

    private void AddPosition()
    {
        OutgoingInvoice.Rechnungspositionen.Add(new());
    }

    private void RemovePosition(Ausgangsrechnungsposition position)
    {
        OutgoingInvoice.Rechnungspositionen.Remove(position);
    }
}
