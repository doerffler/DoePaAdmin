@page "/cost_centre_types/{CostCentreTypeId:int}/edit"

@inject ApiService ApiService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ToastService ToastService

<PageTitle>Kostenstellenart bearbeiten | ACC Web UI</PageTitle>

<Card Class="shadow-sm mb-3">
    <CardBody>
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <h1>Kostenstellenart bearbeiten</h1>
            <div class="btn-group" role="group" aria-label="Actions">
                <Button Type="ButtonType.Link" To="/accounting_units" Color="ButtonColor.Primary"><Icon Name="IconName.BackspaceFill" /> Zurück</Button>
                <Button @onclick="Save" Color="ButtonColor.Primary"><Icon Name="IconName.Floppy" /> Speichern</Button>
            </div>
        </div>
        @if (IsLoading)
        {
            <div class="spinner-border ms-auto" aria-hidden="true"></div>
        }
        else
        {
            @if (CostCentreType != null)
            {
            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <label for="name">Bezeichnung:</label>
                        <input type="text" class="form-control" id="name" @bind-value="CostCentreType.Kostenstellenartbezeichnung">
                    </div>
                </div>
            </div>
            }
            else
            {
                <Alert Color="AlertColor.Danger" Class="shadow-sm"><Icon Name="IconName.ExclamationTriangleFill" /> Keine Kostenstellenart vorhanden</Alert>
            }
        }
    </CardBody>
</Card>

@code {
    [Parameter]
    public int CostCentreTypeId { get; set; }

    private Kostenstellenart CostCentreType;

    private ClaimsPrincipal AuthenticatedUser;

    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        ApiService.InitializeEndpoint(ResourceEndpoint.cost_centre_types);
        CostCentreType = await ApiService.GetByIdAsync<Kostenstellenart>(CostCentreTypeId);

        IsLoading = false;
    }

    private async Task Save()
    {
        ApiService.InitializeEndpoint(ResourceEndpoint.cost_centre_types);
        await ApiService.UpdateAsync<Kostenstellenart>(CostCentreTypeId, CostCentreType);

        ToastService.Notify(
            new ToastMessage()
                {
                    Type = ToastType.Success,
                    IconName = IconName.Briefcase,
                    Title = "Kostenstellenart",
                    HelpText = DateTime.Now.ToString(),
                    Message = "Kostenstellenart erfolgreich bearbeitet",
                }
        );

        Navigation.NavigateTo("cost_centre_types");
    }
}
