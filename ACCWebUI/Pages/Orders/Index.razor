@page "/orders"

@inject OrderService service
@inject NavigationManager Navigation

@attribute [Authorize]

<PageTitle>Aufträge | ACC Web UI</PageTitle>

<div style="display: flex; justify-content: space-between; align-items: center;">
    <h1>Aufträge</h1>
    <Button Type="ButtonType.Link" @onclick="Create" Color="ButtonColor.Primary"><Icon Name="IconName.Plus" /> Neuer Auftrag</Button>
</div>

<table class="table table-hover">
    <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Auftragsname</th>
            <th scope="col">Auftragsbeginn</th>
            <th scope="col">Auftragsende</th>
            <th scope="col"></th>
        </tr>
    </thead>
    <tbody>
        @if (Orders != null)
        {
            @foreach (Auftrag order in Orders)
            {
                <tr>
                    <td>@order.AuftragID</td>
                    <td>@order.Auftragsname</td>
                    <td>@order.Auftragsbeginn</td>
                    <td>@order.Auftragsende</td>
                    <td>
                        <div class="btn-group" role="group" aria-label="Aktionen">
                            <Button Type="ButtonType.Link" @onclick="() => Edit(order.AuftragID)" Color="ButtonColor.Primary"><Icon Name="IconName.PencilSquare" /></Button>
                            <Button Type="ButtonType.Link" @onclick="() => Show(order.AuftragID)" Color="ButtonColor.Primary"><Icon Name="IconName.Eye" /></Button>
                            <Button Type="ButtonType.Link" @onclick="() => Delete(order.AuftragID)" Color="ButtonColor.Danger"><Icon Name="IconName.Trash" /></Button>
                        </div>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="5">
                    Keine Aufträge vorhanden
                </td>
            </tr>
        }
    </tbody>
</table>

@if (Orders != null)
{
    <div class="btn-group" role="group" aria-label="Pagination">
        <Button Type="ButtonType.Link" Size="Size.Small" Outline="true" Color="ButtonColor.Secondary" @onclick="FirstPage" Disabled="currentPage == 1"><Icon Name="IconName.SkipBackward" /></Button>
        <Button Type="ButtonType.Link" Size="Size.Small" Outline="true" Color="ButtonColor.Secondary" @onclick="PreviousPage" Disabled="currentPage == 1"><Icon Name="IconName.CaretLeft" /></Button>
        <Button Type="ButtonType.Link" Size="Size.Small" Color="ButtonColor.Secondary"><b>@currentPage</b></Button>
        <Button Type="ButtonType.Link" Size="Size.Small" Outline="true" Color="ButtonColor.Secondary" @onclick="NextPage" Disabled="!HasNextPage"><Icon Name="IconName.CaretRight" /></Button>
        <Button Type="ButtonType.Link" Size="Size.Small" Outline="true" Color="ButtonColor.Secondary" @onclick="LastPage" Disabled="currentPage == totalPages"><Icon Name="IconName.SkipForward" /></Button>
    </div>
    <span>
        @($"{(currentPage - 1) * pageSize + 1} - {Math.Min(currentPage * pageSize, totalItems)} von {totalItems} Ergebnisse(n) auf insgesamt {totalPages} Seite(n)")
    </span>
}

@code {
    // Default methods
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    // Entity actions
    protected void Create()
    {
        Navigation.NavigateTo("orders/create");
    }

    protected void Edit(int AuftragID)
    {
        Navigation.NavigateTo($"orders/{AuftragID}/edit");
    }

    protected void Show(int AuftragID)
    {
        Navigation.NavigateTo($"orders/{AuftragID}");
    }

    protected async Task Delete(int AuftragID)
    {
        _ = await service.DeleteOrderAsync(AuftragID);
    }

    // Entity
    public IEnumerable<Auftrag> Orders;

    private async Task LoadData()
    {
        OrderResponseDTO dto = await service.GetOrdersAsync(currentPage, pageSize);
        Orders = dto.Auftraege;
        totalItems = dto.TotalCount;
        totalPages = (int)Math.Ceiling((double)totalItems / pageSize);
    }

    // Entity pagination
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalItems = 0;
    private int totalPages = 0;

    private bool HasNextPage => currentPage != totalPages;

    private async Task FirstPage()
    {
        currentPage = 1;
        await LoadData();
    }

    private async Task NextPage()
    {
        if (HasNextPage)
        {
            currentPage++;
            await LoadData();
        }
    }
    
    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadData();
        }
    }

    private async Task LastPage()
    {
        currentPage = totalPages;
        await LoadData();
    }
}